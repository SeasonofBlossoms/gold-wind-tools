name: Build and Publish

on:
  push:
    tags: ["v*", "*-rc.*", "*-beta.*", "*-alpha.*"] # 只在打标签时触发

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          # 获取完整的 Git 历史，以便正确提取版本信息
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Validate tag format
        id: validate_tag
        run: |
          # 提取标签名（去除 refs/tags/ 前缀）
          TAG_NAME="${GITHUB_REF#refs/tags/}"

          # 验证标签是否符合语义化版本规范（包括预发布版本）
          if [[ ! "$TAG_NAME" =~ ^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-((0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
            echo "错误: 标签 '$TAG_NAME' 不符合语义化版本规范"
            echo "有效格式示例: v1.0.0, 2.1.4, 1.0.0-rc.1, 2.3.4-beta.2"
            exit 1
          fi

          # 输出标签名供后续步骤使用
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "VALIDATED_TAG=true" >> $GITHUB_OUTPUT

      - name: Extract version from tag
        id: get_version
        run: |
          # 去除可能存在的 'v' 前缀
          VERSION="${TAG_NAME#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        env:
          TAG_NAME: ${{ steps.validate_tag.outputs.TAG_NAME }}

      - name: Run build
        run: npm run build --if-present

      - name: Run tests
        run: npm test --if-present

      - name: Update package.json version
        run: npm version ${{ steps.get_version.outputs.VERSION }} --no-git-tag-version --allow-same-version

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate changelog
        run: |
          # 如果有 conventional-changelog，可以使用它生成变更日志
          npx conventional-changelog -p angular -i CHANGELOG.md -s || echo "No conventional-changelog found, skipping changelog generation"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            # 变更日志

            版本 ${{ steps.get_version.outputs.VERSION }} 已发布。

            ## 安装

            ```bash
            npm install your-package-name@${{ steps.get_version.outputs.VERSION }}
            ```

            ## 变更内容

            查看提交历史或变更日志文件了解详细变更内容。
          body_path: CHANGELOG.md # 如果上面生成了变更日志文件，优先使用文件内容
          files: |
            dist/*
            !dist/**/*.map # 排除源映射文件，如果需要的话
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GOLD_WIND_TOKEN }}
